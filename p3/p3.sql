/* PRÁCTICA 03 */

/* CONSULTAS SENCILLAS */

/* 1. OBTENER LOS DETALLES COMPLETOS DE TODOS LOS PROYECTOS. */
SELECT * FROM J;

/* 2. OBTENER LOS DETALLES COMPLETOS DE TODOS LOS PROYECTOS DE LONDRES. */
SELECT * FROM J
WHERE CIUDAD = 'Londres';

/* 3. OBTENER LOS NÚMEROS DE LOS PROVEEDORES QUE SUMINISTRAN PARTES AL PROYECTO J1, 
ORDENADOS POR NÚMERO DE PROVEEDOR. */
SELECT `S#` FROM SPJ
WHERE `J#` = 'J1'
ORDER BY `S#`;

/* 4. OBTENER TODOS LOS ENVÍOS EN LOS CUALES LA CANTIDAD ESTÁ EN EL INTERVALO
DE 300 A 750 INCLUSIVE. */
SELECT * FROM SPJ
WHERE CANTIDAD >= 300 AND CANTIDAD <= 750;

/* 5. OBTENER UNA LISTA DE TODAS LAS COMBINACIONES PARTE-COLOR/PARTE-CIUDAD, 
ELIMINANDO TODAS LAS PAREJAS COLOR/CIUDAD REPETIDAS. */
SELECT DISTINCT COLOR, CIUDAD FROM P;

/* REUNIONES */

/* 6. OBTENER TODAS LAS 3-UPLAS NÚMERO DE PROVEEDOR/NÚMERO DE PARTE/ NÚMERO DE PROYECTO TALES QUE 
EL PROVEEDOR, LA PARTE Y EL PROYECTO INDICADOS ESTÉN TODOS EN LA MISMA CIUDAD (COSITUADOS). */
SELECT `S#`, `P#`, `J#` FROM S, P, J 
WHERE S.CIUDAD = P.CIUDAD AND P.CIUDAD = J.CIUDAD;

/* 7. OBTENER TODAS LAS 3-UPLAS NÚMERO DE PROVEEDOR/NÚMERO DE PARTE/ NÚMERO DE PROYECTO TALES QUE EL
PROVEEDOR, LA PARTE Y EL PROYECTO INDICADOS NO ESTÉN TODOS COSITUADOS. */
SELECT `S#`, `P#`, `J#` FROM S, P, J
WHERE NOT (S.CIUDAD = P.CIUDAD AND P.CIUDAD = J.CIUDAD);

/* 8. OBTENER TODAS LAS 3-UPLAS NÚMERO DE PROVEEDOR/NÚMERO DE PARTE/ NÚMERO DE PROYECTO TALES QUE EL
PROVEEDOR, LA PARTE Y EL PROYECTO INDICADOS ESTÉN TODOS EN DIFERENTE CIUDAD. */
SELECT `S#`, `P#`, `J#` FROM S, P, J 
WHERE S.CIUDAD != P.CIUDAD 
  AND S.CIUDAD != J.CIUDAD 
  AND P.CIUDAD != J.CIUDAD;

/* 9. OBTENER LOS NÚMEROS DE LAS PARTES SUMINISTRADAS POR ALGÚN PROVEEDOR DE LONDRES. */
SELECT DISTINCT `P#` FROM SPJ, S
WHERE SPJ.`S#` = S.`S#`
  AND CIUDAD = 'Londres';

/* 10. OBTENER LOS NÚMEROS DE LAS PARTES SUMINISTRADAS POR UN PROVEEDOR DE LONDRES A UN PROYECTO EN
LONDRES. */
SELECT DISTINCT `P#` FROM SPJ, S, J
WHERE SPJ.`S#` = S.`S#` 
  AND SPJ.`J#` = J.`J#` 
  AND S.CIUDAD = 'Londres' 
  AND J.CIUDAD = 'Londres';

/* 11. OBTENER TODAS LAS PAREJAS DE NOMBRES DE CIUDAD TALES QUE UN PROVEEDOR DE LA PRIMERA CIUDAD
SUMINISTRE PARTES A UN PROYECTO EN LA SEGUNDA CIUDAD. */
SELECT DISTINCT S.CIUDAD AS PROVEEDOR_CIUDAD, J.CIUDAD AS PROYECTO_CIUDAD 
FROM SPJ, S, J
WHERE SPJ.`S#` = S.`S#` 
  AND SPJ.`J#` = J.`J#`; 

/* 12. OBTENER LOS NÚMEROS DE LAS PARTES SUMINISTRADAS A UN PROYECTO POR UN PROVEEDOR SITUADO EN LA MISMA
CIUDAD QUE EL PROYECTO. */
SELECT DISTINCT `P#` FROM SPJ, S, J
WHERE SPJ.`S#` = S.`S#` 
  AND SPJ.`J#` = J.`J#`
  AND S.CIUDAD = J.CIUDAD; 

/* 13. OBTENER LOS NÚMEROS DE LOS PROYECTOS A LOS CUALES SUMINISTRA PARTES POR LO MENOS UN PROVEEDOR
SITUADO EN UNA CIUDAD DISTINTA. */
SELECT DISTINCT J.`J#` FROM SPJ, S, J
WHERE SPJ.`S#` = S.`S#` 
  AND SPJ.`J#` = J.`J#`
  AND S.CIUDAD != J.CIUDAD; 

/* 14. OBTENER TODAS LAS PAREJAS DE NÚMEROS DE PARTE TALES QUE ALGÚN PROVEEDOR SUMINISTRE LAS DOS PARTES
INDICADAS. */
SELECT DISTINCT SPJX.`P#`, SPJY.`P#` FROM SPJ SPJX, SPJ SPJY
WHERE SPJX.`S#` = SPJY.`S#`
  AND SPJX.`P#` < SPJY.`P#`; 

/* FUNCIONES DE AGREGADOS */

/* 15. OBTENER EL NÚMERO TOTAL DE PROYECTOS A LOS CUALES SUMINISTRA PARTES EL PROVEEDOR S1. */
SELECT COUNT(DISTINCT `J#`) FROM SPJ
WHERE `S#` = 'S1';

/* 16. OBTENER LA CANTIDAD TOTAL DE LA PARTE P1 SUMINISTRADA POR EL PROVEEDOR S1. */
SELECT SUM(CANTIDAD) FROM SPJ
WHERE `P#` = 'P1'
  AND `S#` = 'S1';

/* 17. PARA CADA PARTE SUMINISTRADA A UN PROYECTO, OBTENER EL NÚMERO DE PARTE, EL NÚMERO DE PROYECTO Y LA
CANTIDAD TOTAL CORRESPONDIENTE. */
SELECT `P#`, `J#`, SUM(CANTIDAD) FROM SPJ
GROUP BY `P#`, `J#`; 

/* 18. OBTENER LOS NÚMEROS DE LAS PARTES SUMINISTRADAS A ALGÚN PROYECTO TALES QUE LA CANTIDAD PROMEDIO
SUMINISTRADA SEA MAYOR QUE 320. */
SELECT DISTINCT `P#` FROM SPJ
GROUP BY `P#`, `J#`
HAVING AVG(CANTIDAD) > 320;

/* DIVERSAS */

/* 19. OBTENER TODOS LOS ENVÍOS PARA LOS CUALES LA CANTIDAD NO SEA NULA. */
SELECT * FROM SPJ
WHERE CANTIDAD IS NOT NULL;

/* 20. OBTENER NÚMEROS DE PROYECTO Y CIUDADES EN LOS CUALES LA SEGUNDA LETRA DEL NOMBRE DE LA CIUDAD SEA
UNA "O" */
SELECT DISTINCT `J#`, CIUDAD FROM J
WHERE CIUDAD LIKE '_o%';

/* SUBCONSULTAS */

/* 21. OBTENER LOS NOMBRES DE LOS PROYECTOS A LOS CUALES SUMINISTRA PARTES EL PROVEEDOR S1 */
SELECT DISTINCT JNOMBRE FROM J
WHERE `J#` IN (SELECT `J#` FROM SPJ 
	       WHERE `S#` = 'S1');

/* 22. OBTENER LOS COLORES DE LAS PARTES SUMINISTRADAS POR EL PROVEEDOR S1. */
SELECT DISTINCT COLOR FROM P
WHERE `P#` IN (SELECT `P#` FROM SPJ 
               WHERE `S#` = 'S1');

/* 23. OBTENER LOS NÚMEROS DE LAS PARTES SUMINISTRADAS A CUALQUIER PROYECTO EN LONDRES. */
SELECT DISTINCT `P#` FROM SPJ
WHERE `J#` IN (SELECT `J#` FROM J
	       WHERE CIUDAD = 'Londres'); 

/* 24. OBTENER LOS NÚMEROS DE LOS PROYECTOS DONDE SE UTILICE AL MENOS UNA DE LAS PARTES SUMINISTRADAS POR EL
PROVEEDOR S1. */
SELECT DISTINCT `J#` FROM SPJ 
WHERE `P#` IN (SELECT `P#` FROM SPJ
	       WHERE `S#` = 'S1');

/* 25. OBTENER LOS NÚMEROS DE LOS PROVEEDORES QUE SUMINISTREN POR LO MENOS UNA DE LAS PARTES
SUMINISTRADAS POR AL MENOS UNO DE LOS PROVEEDORES QUE SUMINISTRAN POR LO MENOS UNA PARTE ROJA. */
SELECT DISTINCT `S#` FROM SPJ
WHERE `P#` IN (SELECT `P#` FROM SPJ
	       WHERE `S#` IN (SELECT `S#` FROM SPJ 
		              WHERE `P#` IN (SELECT `P#` FROM P 
				             WHERE COLOR = 'Rojo')));

/* 26. OBTENER LOS NÚMEROS DE LOS PROVEEDORES CUYA SITUACIÓN SEA INFERIOR A LA DEL PROVEEDOR S1. */
SELECT `S#` FROM S
WHERE SITUACION < (SELECT SITUACION FROM S WHERE `S#` = 'S1');

/* 27. OBTENER LOS NÚMEROS DE LOS PROYECTOS CUYA CIUDAD SEA LA PRIMERA EN LA LISTA ALFABÉTICA DE LAS CIUDADES
DONDE HAY PROYECTOS. */
SELECT DISTINCT `J#` FROM J
WHERE CIUDAD = (SELECT MIN(CIUDAD) FROM J);

/* EXISTS */

/* 28. REPETIR EL EJERCICIO 23 UTILIZANDO EXISTS EN LA SOLUCIÓN. */
SELECT DISTINCT `P#` FROM SPJ
WHERE EXISTS (SELECT * FROM J
	      WHERE `J#` = SPJ.`J#` AND CIUDAD = 'Londres'); 

/* 29. REPETIR EL EJERCICIO 24 UTILIZANDO EXISTS EN LA SOLUCIÓN. */
SELECT DISTINCT UNO.`J#` FROM SPJ AS UNO
WHERE EXISTS (SELECT * FROM SPJ AS DOS
	      WHERE UNO.`P#` = DOS.`P#` AND DOS.`S#` = 'S1');

/* 30. OBTENER LOS NÚMEROS DE LOS PROYECTOS A LOS CUALES NO SUMINISTRA NINGUNA PARTE ROJA NINGUNO DE LOS
PROVEEDORES DE LONDRES. */
SELECT `J#` FROM J 
WHERE NOT EXISTS (SELECT * FROM SPJ
		  WHERE `J#` = J.`J#`
	                AND `P#` IN (SELECT `P#` FROM P 
				     WHERE COLOR = 'Rojo')
                        AND `S#` IN (SELECT `S#` FROM S 
				     WHERE CIUDAD = 'Londres'));

/* 31. OBTENER LOS NÚMEROS DE LOS PROYECTOS PARA LOS CUALES S1 ES EL ÚNICO PROVEEDOR. */
SELECT DISTINCT `J#` FROM SPJ UNO
WHERE NOT EXISTS (SELECT * FROM SPJ DOS
	          WHERE DOS.`J#` = UNO.`J#` AND DOS.`S#` <> 'S1');

/* UNIÓN */

/* 32. CONSTRUIR UNA LISTA ORDENADA DE TODAS LAS CIUDADES EN LAS CUALES ESTÉ SITUADO POR LO MENOS UN
PROVEEDOR, UNA PARTE O UN PROYECTO. */
SELECT CIUDAD FROM S
UNION
SELECT CIUDAD FROM P
UNION
SELECT CIUDAD FROM J
ORDER BY 1;

/* OPERACIONES DE ACTUALIZACIÓN */

/* 33. CAMBIAR A GRIS EL COLOR DE TODAS LAS PARTES ROJAS. */
UPDATE P
SET COLOR = 'Gris'
WHERE COLOR = 'Rojo';

/* 34. ELIMINAR TODOS LOS PROYECTOS PARA LOS CUALES NO HAYA ENVÍOS. */
DELETE FROM J 
WHERE `J#` NOT IN (SELECT `J#` FROM SPJ);

/* 35. INSERTAR UN NUEVO PROVEEDOR (S10) EN LA TABLA S. EL NOMBRE Y LA CIUDAD SON SALAZAR Y NUEVA YORK,
RESPECTIVAMENTE; LA SITUACIÓN NO SE CONOCE TODAVÍA. */
-- NOTA: DEBIMOS MODIFICACAR SPJ.SQL YA QUE LA SITUACION NO ACEPTABA VALORES NULOS
INSERT 
INTO S (`S#`, SNOMBRE, CIUDAD)
VALUES ('S10', 'Salazar', 'Nueva York')
ON DUPLICATE KEY UPDATE SNOMBRE = SNOMBRE; -- SI LA CLAVE YA ESTABA, INSERT DABA ERROR

